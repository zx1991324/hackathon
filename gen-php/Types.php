<?php
/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class Direction {
  const UP = 1;
  const DOWN = 2;
  const LEFT = 3;
  const RIGHT = 4;
  static public $__names = array(
    1 => 'UP',
    2 => 'DOWN',
    3 => 'LEFT',
    4 => 'RIGHT',
  );
}

class Position {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'x',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'y',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $x = null;
  /**
   * @var int
   */
  public $y = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['x'])) {
        $this->x = $vals['x'];
      }
      if (isset($vals['y'])) {
        $this->y = $vals['y'];
      }
    }
  }

  public function getName() {
    return 'Position';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->x);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->y);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Position');
    if ($this->x !== null) {
      $xfer += $output->writeFieldBegin('x', TType::I32, 1);
      $xfer += $output->writeI32($this->x);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->y !== null) {
      $xfer += $output->writeFieldBegin('y', TType::I32, 2);
      $xfer += $output->writeI32($this->y);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tank {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'pos',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Position',
      ),
    3 => array(
      'var' => 'dir',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'hp',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var \Position
   */
  public $pos = null;
  /**
   * @var int
   */
  public $dir = null;
  /**
   * @var int
   */
  public $hp = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['pos'])) {
        $this->pos = $vals['pos'];
      }
      if (isset($vals['dir'])) {
        $this->dir = $vals['dir'];
      }
      if (isset($vals['hp'])) {
        $this->hp = $vals['hp'];
      }
    }
  }

  public function getName() {
    return 'Tank';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->pos = new \Position();
            $xfer += $this->pos->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dir);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->hp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tank');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pos !== null) {
      if (!is_object($this->pos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pos', TType::STRUCT, 2);
      $xfer += $this->pos->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dir !== null) {
      $xfer += $output->writeFieldBegin('dir', TType::I32, 3);
      $xfer += $output->writeI32($this->dir);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hp !== null) {
      $xfer += $output->writeFieldBegin('hp', TType::I32, 4);
      $xfer += $output->writeI32($this->hp);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Shell {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'pos',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Position',
      ),
    3 => array(
      'var' => 'dir',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var \Position
   */
  public $pos = null;
  /**
   * @var int
   */
  public $dir = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['pos'])) {
        $this->pos = $vals['pos'];
      }
      if (isset($vals['dir'])) {
        $this->dir = $vals['dir'];
      }
    }
  }

  public function getName() {
    return 'Shell';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->pos = new \Position();
            $xfer += $this->pos->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dir);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Shell');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pos !== null) {
      if (!is_object($this->pos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pos', TType::STRUCT, 2);
      $xfer += $this->pos->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dir !== null) {
      $xfer += $output->writeFieldBegin('dir', TType::I32, 3);
      $xfer += $output->writeI32($this->dir);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GameState {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tanks',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Tank',
        ),
      ),
    2 => array(
      'var' => 'shells',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Shell',
        ),
      ),
    3 => array(
      'var' => 'yourFlagNo',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'enemyFlagNo',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'flagPos',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Position',
      ),
    );

  /**
   * @var \Tank[]
   */
  public $tanks = null;
  /**
   * @var \Shell[]
   */
  public $shells = null;
  /**
   * @var int
   */
  public $yourFlagNo = null;
  /**
   * @var int
   */
  public $enemyFlagNo = null;
  /**
   * @var \Position
   */
  public $flagPos = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tanks'])) {
        $this->tanks = $vals['tanks'];
      }
      if (isset($vals['shells'])) {
        $this->shells = $vals['shells'];
      }
      if (isset($vals['yourFlagNo'])) {
        $this->yourFlagNo = $vals['yourFlagNo'];
      }
      if (isset($vals['enemyFlagNo'])) {
        $this->enemyFlagNo = $vals['enemyFlagNo'];
      }
      if (isset($vals['flagPos'])) {
        $this->flagPos = $vals['flagPos'];
      }
    }
  }

  public function getName() {
    return 'GameState';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->tanks = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Tank();
              $xfer += $elem5->read($input);
              $this->tanks []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->shells = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $elem11 = new \Shell();
              $xfer += $elem11->read($input);
              $this->shells []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->yourFlagNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->enemyFlagNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->flagPos = new \Position();
            $xfer += $this->flagPos->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GameState');
    if ($this->tanks !== null) {
      if (!is_array($this->tanks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tanks', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->tanks));
        {
          foreach ($this->tanks as $iter12)
          {
            $xfer += $iter12->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shells !== null) {
      if (!is_array($this->shells)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('shells', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->shells));
        {
          foreach ($this->shells as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yourFlagNo !== null) {
      $xfer += $output->writeFieldBegin('yourFlagNo', TType::I32, 3);
      $xfer += $output->writeI32($this->yourFlagNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enemyFlagNo !== null) {
      $xfer += $output->writeFieldBegin('enemyFlagNo', TType::I32, 4);
      $xfer += $output->writeI32($this->enemyFlagNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flagPos !== null) {
      if (!is_object($this->flagPos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('flagPos', TType::STRUCT, 5);
      $xfer += $this->flagPos->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Order {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tankId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'order',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'dir',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * DO NOT try to send a order with competitor's tank id.
   * In that case, game engine will treat it as cheat and would ignore ALL this player's orders in this round.
   * 
   * 
   * @var int
   */
  public $tankId = null;
  /**
   * Possible orders are: turnTo, fire, move. All others words are illegal and will be ignored.
   * If want a tank to stick around, just do NOT send any order with that tank.
   * 
   * 
   * @var string
   */
  public $order = null;
  /**
   * the dir are always on base of the map instead of the tank itself,
   * which mean if a 'fire' order with UP direction will made the tank fire a shell toward the UP diction of the map.
   * 
   * Only move order does not need a direction, in that case just give a direction and game engine will ignore it.
   * 
   * 
   * @var int
   */
  public $dir = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tankId'])) {
        $this->tankId = $vals['tankId'];
      }
      if (isset($vals['order'])) {
        $this->order = $vals['order'];
      }
      if (isset($vals['dir'])) {
        $this->dir = $vals['dir'];
      }
    }
  }

  public function getName() {
    return 'Order';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tankId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->order);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dir);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Order');
    if ($this->tankId !== null) {
      $xfer += $output->writeFieldBegin('tankId', TType::I32, 1);
      $xfer += $output->writeI32($this->tankId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order !== null) {
      $xfer += $output->writeFieldBegin('order', TType::STRING, 2);
      $xfer += $output->writeString($this->order);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dir !== null) {
      $xfer += $output->writeFieldBegin('dir', TType::I32, 3);
      $xfer += $output->writeI32($this->dir);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tankSpeed',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'shellSpeed',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'tankHP',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'tankScore',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'flagScore',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'maxRound',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'roundTimeoutInMs',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $tankSpeed = null;
  /**
   * @var int
   */
  public $shellSpeed = null;
  /**
   * @var int
   */
  public $tankHP = null;
  /**
   * @var int
   */
  public $tankScore = null;
  /**
   * @var int
   */
  public $flagScore = null;
  /**
   * @var int
   */
  public $maxRound = null;
  /**
   * @var int
   */
  public $roundTimeoutInMs = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tankSpeed'])) {
        $this->tankSpeed = $vals['tankSpeed'];
      }
      if (isset($vals['shellSpeed'])) {
        $this->shellSpeed = $vals['shellSpeed'];
      }
      if (isset($vals['tankHP'])) {
        $this->tankHP = $vals['tankHP'];
      }
      if (isset($vals['tankScore'])) {
        $this->tankScore = $vals['tankScore'];
      }
      if (isset($vals['flagScore'])) {
        $this->flagScore = $vals['flagScore'];
      }
      if (isset($vals['maxRound'])) {
        $this->maxRound = $vals['maxRound'];
      }
      if (isset($vals['roundTimeoutInMs'])) {
        $this->roundTimeoutInMs = $vals['roundTimeoutInMs'];
      }
    }
  }

  public function getName() {
    return 'Args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tankSpeed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->shellSpeed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tankHP);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tankScore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flagScore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxRound);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->roundTimeoutInMs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Args');
    if ($this->tankSpeed !== null) {
      $xfer += $output->writeFieldBegin('tankSpeed', TType::I32, 1);
      $xfer += $output->writeI32($this->tankSpeed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shellSpeed !== null) {
      $xfer += $output->writeFieldBegin('shellSpeed', TType::I32, 2);
      $xfer += $output->writeI32($this->shellSpeed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tankHP !== null) {
      $xfer += $output->writeFieldBegin('tankHP', TType::I32, 3);
      $xfer += $output->writeI32($this->tankHP);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tankScore !== null) {
      $xfer += $output->writeFieldBegin('tankScore', TType::I32, 4);
      $xfer += $output->writeI32($this->tankScore);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flagScore !== null) {
      $xfer += $output->writeFieldBegin('flagScore', TType::I32, 5);
      $xfer += $output->writeI32($this->flagScore);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxRound !== null) {
      $xfer += $output->writeFieldBegin('maxRound', TType::I32, 6);
      $xfer += $output->writeI32($this->maxRound);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->roundTimeoutInMs !== null) {
      $xfer += $output->writeFieldBegin('roundTimeoutInMs', TType::I32, 7);
      $xfer += $output->writeI32($this->roundTimeoutInMs);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


